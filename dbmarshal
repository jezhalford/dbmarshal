#!/usr/bin/env python

import os.path
import sys
import os
import pickle
import MySQLdb as mysql
from warnings import filterwarnings, resetwarnings
import sqlparse
from time import time

class DBMarshal(object):

    __log_table_sql = """CREATE TABLE IF NOT EXISTS `dbmarshal_log` (
          `change_number` bigint(20) NOT NULL PRIMARY KEY,
          `started` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
          `completed` timestamp NULL DEFAULT NULL,
          `description` varchar(500) NOT NULL
        ) ENGINE=InnoDB DEFAULT CHARSET=latin1"""

    def __init__(self, hostname, username, password, database, directory):
        """
        Constructor
        """
        self.__hostname = hostname
        self.__username = username
        self.__password = password
        self.__database = database
        self.__directory = os.path.abspath(directory)
        self.__start_time = 0;

    @staticmethod
    def factory(hostname, username, password, database, directory):
        """
        Sets up and returns a new dbmarshal with all the info it needs.
        """
        return DBMarshal(hostname, username, password, database, os.path.abspath(directory))

    @staticmethod
    def create_alias(hostname, username, password, database, directory, alias, config_root=None):
        """
        Sets up and returns a new dbmarshal with all the info it needs.
        """
        DBMarshal.talk("Setting up alias: " + alias)

        directory = os.path.abspath(directory)

        if os.path.exists(directory + '/revisions') == False:
            os.makedirs(directory + '/revisions')
            DBMarshal.done('Created directory ' + directory + '/revisions')

        if os.path.exists(directory + '/triggers') == False:
            os.makedirs(directory + '/triggers')
            DBMarshal.done('Created directory ' + directory + '/triggers')

        if os.path.exists(directory + '/stored-procedures') == False:
            os.makedirs(directory + '/stored-procedures')
            DBMarshal.done('Created directory ' + directory + '/stored-procedures')

        dbm = DBMarshal(hostname, username, password, database, directory)
        dbm.clone(alias, False, config_root)

        DBMarshal.done('Config successfully saved as "' + alias + '".')

        return dbm

    @staticmethod
    def from_alias(alias, config_root=None):
        """
        Takes a config file (from the supplied alias) and puts the settings from it into dbmarshal.
        """
        if config_root == None:
            config_root = DBMarshal.get_config_root()
        config = config_root + '/' + alias

        if os.path.exists(config):

            f = open(config, 'r')

            data = pickle.load(f)
            f.close()
            return DBMarshal.factory(data['hostname'], data['username'],
                                        data['password'], data['database'], data['directory'])
        else:

            DBMarshal.error('Could not find a valid config file "' + config + '"')

    @staticmethod
    def get_config_root():
        """
        Returns the directory in which config files should be stored.
        """
        home = os.getenv("HOME")

        config_root = home + '/.dbmarshal'

        if not os.path.isdir(config_root):
           os.makedirs(config_root)

        return config_root

    @staticmethod
    def talk(heading, messages = []):

        if heading is not None:
            print "\n\033[1mdbmarshal:\033[0m " + heading

        for message in messages:
            print "\t" + message

    @staticmethod
    def error(message):
        sys.stderr.write('\n\033[91m\033[1mERROR:\033[0m\033[91m ' + message + '\033[0m\n')
        sys.exit(1)

    @staticmethod
    def warn(message):
        sys.stderr.write('\n\033[93m\033[1mWARNING:\033[0m\033[93m ' + message + '\033[0m\n')

    @staticmethod
    def done(message):
        print "\n\t\033[92m" + message + "\033[0m"

    def __get_db_connection(self):
        try:
            conn = mysql.connect(self.__hostname, self.__username, self.__password, self.__database)
            conn.autocommit(True)
            return conn
        except mysql.Error, e:
            DBMarshal.error("Error %d: %s" % (e.args[0],e.args[1]))

    def __get_revisions_dir(self):
        path = self.__directory + '/revisions'
        if os.path.exists(path):
            return path
        DBMarshal.error('Directory "' + path + '" does not exist.' )

    def __get_sprocs_dir(self):
        path = self.__directory + '/stored-procedures'
        if os.path.exists(path):
            return path
        DBMarshal.error('Directory "' + path + '" does not exist.' )

    def __get_triggers_dir(self):
        path = self.__directory + '/triggers'
        if os.path.exists(path):
            return path
        DBMarshal.error('Directory "' + path + '" does not exist.' )

    def __applied_status(self):
        """
        Returns the revision number that was most recently applied to the database.
        """
        try:
            conn = self.__get_db_connection()

            cursor = conn.cursor()
            cursor.execute('SELECT `change_number` FROM `dbmarshal_log` ORDER BY `change_number` DESC LIMIT 1')
            data = cursor.fetchone()
            cursor.close()
            conn.close()

            if data == None:
                data = 0
            else:
                data = int(data[0])

            return data

        except mysql.Error, e:
            DBMarshal.error("Error %d: %s" % (e.args[0],e.args[1]))

    def __available_status(self):
        """
        Returns the highest available revision number in the revisions directory.
        """
        listing = os.listdir(self.__get_revisions_dir())

        highest = 0

        for file in listing:
            if file.endswith('.sql'):
                raw = file.rstrip('.sql')
                if int(raw) > highest:
                    highest = int(raw)

        return highest

    def __get_static_status(self):
        """
        Returns a count of static scripts that need to be applied.
        """
        feedback = {'sprocs' : 0, 'triggers' : 0}

        trigger_listing = os.listdir(self.__get_triggers_dir())
        sproc_listing = os.listdir(self.__get_sprocs_dir())

        for file in trigger_listing:
            if file.endswith('.sql'):
                feedback['triggers'] += 1

        for file in sproc_listing:
            if file.endswith('.sql'):
                feedback['sprocs'] += 1

        return feedback

    def __get_revisions(self, start):
        """
        Returns all of the available revisions from a given start (inclusive) to the end, in
        ascending order.
        """
        revisions = []

        def f(x): return x.endswith('.sql')

        listing = filter(f, os.listdir(self.__get_revisions_dir()))

        listing.sort(key=lambda number: int(number.rstrip('.sql')))

        for file in listing:
            if file.endswith('.sql'):
                f = open(os.path.realpath(self.__get_revisions_dir() + '/' + file), 'r')
                script = f.read()
                number = file.rstrip('.sql')
                if int(number) >= start:
                    revisions.append({
                                'script' : script,
                                'name' : file,
                                'number' : number
                                })
        return revisions

    def __get_static_scripts(self):
        """
        Returns all of the static migration scripts.
        """
        scripts = []

        triggers_listing = os.listdir(self.__get_triggers_dir())
        sprocs_listing = os.listdir(self.__get_sprocs_dir())

        for file in triggers_listing:
            if file.endswith('.sql'):

                path = os.path.realpath(self.__get_triggers_dir() + '/' + file)

                f = open(os.path.realpath(self.__get_triggers_dir() + '/' + file), 'r')
                script = f.read()
                scripts.append({'script' : script, 'file' : path})

        for file in sprocs_listing:
            if file.endswith('.sql'):

                path = os.path.realpath(self.__get_sprocs_dir() + '/' + file)

                f = open(path, 'r')
                script = f.read()
                scripts.append({'script' : script, 'file' : path})

        return scripts

    def __get_statics(self):
        """
        Gets a list of any triggers or stored procedures that exist on the database.
        """
        try:

            conn = self.__get_db_connection()

            # sprocs
            cursor = conn.cursor()
            cursor.execute("""SELECT R.SPECIFIC_NAME FROM INFORMATION_SCHEMA.ROUTINES R
                                WHERE R.ROUTINE_SCHEMA = '%s' AND R.ROUTINE_TYPE = 'PROCEDURE'"""
                                % (self.__database))

            sprocs = cursor.fetchall()

            #triggers
            cursor.execute("""SELECT T.TRIGGER_NAME FROM INFORMATION_SCHEMA.TRIGGERS T
                                WHERE TRIGGER_SCHEMA = '%s'""" % (self.__database))
            triggers = cursor.fetchall()

            return {'triggers' : triggers, 'sprocs' : sprocs}

        except mysql.Error, e:
            conn.rollback()
            DBMarshal.error("Error %d: %s" % (e.args[0],e.args[1]) +
                '\n\nCould not get a list of static objects.')

        cursor.close()
        conn.close()


    def __drop_statics(self):
        """
        Drops any triggers or stored procedures that exist on the database.
        """
        try:

            conn = self.__get_db_connection()
            cursor = conn.cursor()

            statics = self.__get_statics()

            for sproc in statics['sprocs']:
                cursor.execute('DROP PROCEDURE %s' % sproc[0])

            for trigger in statics['triggers']:
                cursor.execute('DROP TRIGGER %s' % trigger[0])

            cursor.close()

            conn.commit()

            return {'triggers' : len(statics['triggers']),
                    'sprocs' : len(statics['sprocs'])}

        except mysql.Error, e:
            conn.rollback()
            DBMarshal.error("Error %d: %s" % (e.args[0],e.args[1]) +
                '\n\nFailed to drop static objects.')

            sys.exit(1)

        cursor.close()
        conn.close()

    def __create_statics(self):
        """
        Creates triggers and stored procedures from the static migrations.
        """
        try:
            conn = self.__get_db_connection()

            cursor = conn.cursor()

            feedback = {'sprocs' : 0, 'triggers' : 0}

            for script in self.__get_static_scripts():

                if script['file'].startswith(self.__get_triggers_dir()):
                    feedback['triggers'] += 1
                elif script['file'].startswith(self.__get_sprocs_dir()):
                    feedback['sprocs'] += 1

                cursor.execute(script['script'])

            cursor.close()


            return feedback

        except mysql.Error, e:
            conn.rollback()
            DBMarshal.error("Error %d: %s" % (e.args[0],e.args[1]) +
                "\n\nFailed to run static migration '" + script['file'] + "'.")

        cursor.close()
        conn.close()

    def __run_scripts(self, migrations):
        """
        Runs the supplied migrations
        """
        try:
            conn = self.__get_db_connection()
            cursor = conn.cursor()

            for migration in migrations:
                print "\tApplying revision: " + migration['name'] + "...",

                log_update_one = """
                INSERT INTO `dbmarshal_log` SET `change_number` = %d, `description` = '%s';
                """ % (int(migration['number']), migration['name'])

                log_update_two = """
                UPDATE `dbmarshal_log` SET `completed` = NOW() WHERE `change_number`= %d;
                """ % (int(migration['number']))
                cursor.execute(log_update_one)

                statements = sqlparse.split(migration['script'])

                for statement in statements:
                    if len(statement.strip()) > 0:
                        cursor.execute(statement)

                cursor.execute(log_update_two)

                print 'OK \t\t\t(%07.3f sec)' % (round(time() - self.__start_time, 3))

        except mysql.Error, e:
            try:
                conn.rollback()
                cursor.execute('DELETE FROM `dbmarshal_log` WHERE `change_number`= %d;'
                                   % (int(migration['number'])))
                DBMarshal.error("Error %d: %s" % (e.args[0],e.args[1]))
            except  mysql.Error, e:
                DBMarshal.error("Error %d: %s" % (e.args[0],e.args[1]))


        cursor.close()
        conn.close()

    def __statics_mismatch(self):
        """
        Returns true if there are no static migration files but static objects exist in the database
        """
        statics = self.__get_static_status()
        applied_statics = self.__get_statics()
        return (statics['triggers'] == 0 or statics['sprocs'] == 0) and (len(applied_statics['triggers']) > 0 or len(applied_statics['sprocs']) > 0)

    def export_statics(self):
        """
        Create scripts for sprocs and triggers that currently exist into the database.
        """

        DBMarshal.talk('export_statics')

        try:

            conn = self.__get_db_connection()

            cursor = conn.cursor()

            statics = self.__get_statics()

            for sproc in statics['sprocs']:
                cursor.execute('SHOW CREATE PROCEDURE %s' % sproc[0])
                sproc_info = cursor.fetchone()

                f = open(self.__get_sprocs_dir() + '/' + sproc_info[0] + '.sql' , 'w')
                f.write(sproc_info[2])
                f.close()


            for trigger in  statics['triggers']:
                cursor.execute('SHOW CREATE TRIGGER %s' % trigger[0])
                trigger_info = cursor.fetchone()

                f = open(self.__get_triggers_dir() + '/' + trigger_info[0] + '.sql' , 'w')
                f.write(trigger_info[2])
                f.close()

            DBMarshal.done('Static migrations successfully created from your database. \n\tTriggers:\t\t%s \n\tStored Procedures:\t%s'
                %(self.__get_triggers_dir(), self.__get_sprocs_dir()))

        except mysql.Error, e:
            conn.rollback()
            DBMarshal.error("Error %d: %s" % (e.args[0],e.args[1]))

        cursor.close()
        conn.close()


    def apply(self):
        """
        Applies outstanding migrations to the database.
        """
        self.__start_time = time()

        self.create_log_table()

        if self.__statics_mismatch():
            not_answered = True
            while not_answered:
                DBMarshal.talk("apply")
                DBMarshal.warn('Triggers and/or stored procedures exist in your database but you do not have any corresponding static migrations.' +
                '\n\t Continuing will drop all triggers and stored procedures from your database.' +
                '\n\t To prevent this, answer no and use dbmarshal export_statics to create static migrations for all existing stored procedures and triggers.\n')
                answer = raw_input("\t Do you wish to DROP ALL TRIGGERS AND STORED PROCEDURES FROM YOUR DATABASE? (y/n) ").upper()

                if answer == 'Y':
                    not_answered = False

                if answer == 'N':
                    exit(0)

        applied = self.__applied_status()
        outstanding_migrations = self.__get_revisions(applied+1)

        DBMarshal.talk("apply",
            ["Running migration scripts..."])



        drop_feedback = self.__drop_statics()

        DBMarshal.talk(None, [("Dropped %d stored procedures and %s triggers \t\t(%07.3f sec)" %
                     (drop_feedback['sprocs'], drop_feedback['triggers'], round(time() - self.__start_time, 3)))])

        create_feedback = self.__create_statics()

        DBMarshal.talk(None, [("Created %d stored procedures and %s triggers \t\t(%07.3f sec)" %
                     (create_feedback['sprocs'], create_feedback['triggers'], round(time() - self.__start_time, 3)))])

        if len(outstanding_migrations) == 0:
            DBMarshal.talk(None, ['There are no undeployed revisions available.'])
        else:
            DBMarshal.talk(None, ['Applying revisions...'])
            self.__run_scripts(outstanding_migrations)

        DBMarshal.done('Database successfully updated. \t\t\t\t(%07.3f sec)' % (round(time() - self.__start_time, 3)))

    def describe(self):
        """
        Explain the currently loaded settings.
        """
        DBMarshal.talk('Your alias results in the following settings:', [
            "Hostname:\t\t" + self.__hostname,
            "Username:\t\t" + self.__username,
            "Password:\t\t" + '*' * len(self.__password),
            "Database:\t\t" + self.__database,
            "Migrations Directory:\t" + self.__directory,
        ])

    def status(self):
        """
        Tells you all about where you are with migrations.
        """
        self.create_log_table()

        applied = self.__applied_status()

        available = self.__available_status()

        statics = self.__get_static_status()

        applied_statics = self.__get_statics()

        messages = []

        messages.append("The database is at revision " + str(applied) + ".")

        if available > 0:
            messages.append("Revisions up to number " + str(available) + " are available.")
        else:
            messages.append("0 revisions are available to apply.")

        messages.append(str(available - applied) + " revisions need to be applied.")

        messages.append("%d trigger scripts are available to run."
                                                                        % statics['triggers'])
        messages.append("%d stored procedure scripts are available to run."
                                                                        % statics['sprocs'])

        messages.append("%d triggers exist in the database."
                                                            % len(applied_statics['triggers']))

        messages.append("%d stored procedures exist in the database."
                                                            % len(applied_statics['sprocs']))

        DBMarshal.talk('status', messages)

        if self.__statics_mismatch():
            DBMarshal.warn('Triggers and/or stored procedures exist in your database but you do not have any corresponding static migrations.' +
            '\n\t Using dbmarshal apply now will drop all triggers and stored procedures from your database.' +
            '\n\t To prevent this, Use dbmarshal export_statics to create static migrations for all existing stored procedures and triggers.')


    def create_log_table(self):
        """
        Creates the log table.
        """
        try:
            filterwarnings('ignore', category = mysql.Warning)
            conn = self.__get_db_connection()

            cursor = conn.cursor()
            cursor.execute(self.__log_table_sql)

            conn.commit()
            cursor.close()
            conn.close()
            resetwarnings()

        except mysql.Error, e:
            DBMarshal.error("Error %d %s" % (e.args[0],e.args[1]))

    def clone(self, alias, talk = True, config_root=None):
        """
        Saves the current config under a new specified alias.
        """

        if config_root == None:
            config_root = DBMarshal.get_config_root()
        path = config_root + '/' + alias

        if not os.path.isdir(config_root):
           os.makedirs(config_root)

        f = open(path, 'w')

        config = {
            'hostname' : self.__hostname,
            'username' : self.__username,
            'password' : self.__password,
            'database' : self.__database,
            'directory' : os.path.abspath(self.__directory),
        }

        pickle.dump(config, f)

        f.close()

        if talk:
            DBMarshal.talk('clone');
            DBMarshal.done('Config successfully saved as "' + alias + '".')

#######################################################
#######################################################
#######################################################

def usage():
    print 'Usage:\ndbmarshal init hostname username password database migrations-directory alias [config-root]'
    exit(1)

if len(sys.argv) < 2:
    usage()
elif sys.argv[1] == 'init':
    if len(sys.argv) < 8:
        usage()

    config_root = None
    if len(sys.argv) > 8:
        config_root = sys.argv[8]

    DBMarshal.create_alias(sys.argv[2], sys.argv[3], sys.argv[4], sys.argv[5], sys.argv[6], sys.argv[7], config_root)
    print "\n"

elif len(sys.argv) >= 2:

    alias = 'default'
    config_root = None
    if hasattr(DBMarshal, sys.argv[1]):
        # alias not supplied, so use default config
        action = sys.argv[1]
        start_args = 3
        if len(sys.argv) > 2:
            config_root = sys.argv[2]
    else:
        # use config specified by alias
        alias = sys.argv[1]
        action = sys.argv[2]
        start_args = 4
        if len(sys.argv) > 3:
            config_root = sys.argv[3]

    dbm = DBMarshal.from_alias(alias, config_root)

    if hasattr(dbm, action):
        params = sys.argv[start_args:len(sys.argv)]

        getattr(dbm, action)(*params)

        print "\n"

    else:
        usage()
else:
    usage()
